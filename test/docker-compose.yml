services:
  postgres:
    user: postgres
    image: postgres:9.6
    ports:
      - "5432:5432"
    volumes:
      - nodepgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_DB: 'test_elastic_apm'
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 1s
      timeout: 10s
      retries: 30

  mongodb:
    image: mongo:5
    ports:
      - "27017:27017"
    volumes:
      - nodemongodata:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--quiet"]
      interval: 1s
      timeout: 10s
      retries: 30

  mssql:
    # Tags listed at https://hub.docker.com/r/microsoft/mssql-server
    # Docs: https://learn.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker
    image: mcr.microsoft.com/mssql/server:2022-CU14-ubuntu-22.04
    platform: linux/amd64
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=Very(!)Secure
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - nodemssqldata:/var/opt/mssql
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-C", "-S", "mssql", "-U", "sa", "-P", "Very(!)Secure", "-Q", "select 1"]
      interval: 1s
      timeout: 10s
      retries: 30

  mysql:
    image: mysql:5.7
    # No ARM64 image layer. See https://stackoverflow.com/a/65592942
    platform: linux/x86_64
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    ports:
      - "3306:3306"
    volumes:
      - nodemysqldata:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysql" ,"-h", "mysql", "-P", "3306", "-u", "root", "-e", "SELECT 1"]
      interval: 1s
      timeout: 10s
      retries: 30

  redis:
    image: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 10s
      retries: 30

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "network.host=_site_"
      - "transport.host=127.0.0.1"
      - "http.host=0.0.0.0"
      - "xpack.security.enabled=false"
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 1s
      timeout: 10s
      retries: 30

  cassandra:
    # Avoid the latest cassandra:3 until
    # https://issues.apache.org/jira/browse/CASSANDRA-17581 is resolved and
    # released to https://hub.docker.com/_/cassandra?tab=tags
    image: cassandra:3.11.11
    environment:
      MAX_HEAP_SIZE: "1G"
      HEAP_NEWSIZE: 400m
    ports:
      - "9042:9042"
    volumes:
      - nodecassandradata:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 1s
      timeout: 10s
      retries: 30

  memcached:
    image: memcached:alpine
    user: "11211"
    ports:
      - "11211:11211"
    healthcheck:
      test: ["CMD", "nc", "127.0.0.1:11211", "-z"]
      interval: 1s
      timeout: 10s
      retries: 30

  localstack:
    # https://hub.docker.com/r/localstack/localstack/tags
    image: localstack/localstack:3.0.0
    environment:
      - "DATA_DIR=/var/lib/localstack"
    ports:
      - "4566:4566"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 1s
      timeout: 10s
      retries: 30
    volumes:
      - nodelocalstackdata:/var/lib/localstack

  kafka:
    # Configuration for Kraft (kafka without zookeeper) taken from
    # https://www.saybackend.com/blog/05-kafka-in-docker-kraft
    image: apache/kafka:4.1.0
    ports:
      - "9094:9094"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKAJS_NO_PARTITIONER_WARNING: 1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "./opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

volumes:
  nodepgdata:
    driver: local
  nodemongodata:
    driver: local
  nodemssqldata:
    driver: local
  nodemysqldata:
    driver: local
  nodecassandradata:
    driver: local
  nodelocalstackdata:
    driver: local
  nodekafkadata:
    driver: local
