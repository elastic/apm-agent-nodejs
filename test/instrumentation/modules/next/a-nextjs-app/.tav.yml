# Test Next.js versions.
#
# - We instrument Next.js ">=11.1.0 <14.0.0". I don't see much value in testing
#   every patch-level release. Instead we will test the latest patch release
#   for each minor. (It would be nice if tav supported this natively.)
# - Next.js 11 supports back to node v12.22.0 and v14.5.0. However, when this
#   instrumentation was added, Node v12 was already EOL, so there is less value
#   in testing it.
# - Next.js 11 crashes with Node >=17 unless this workaround is used;
#      NODE_OPTIONS=--openssl-legacy-provider ...
#   See https://github.com/vercel/next.js/issues/30078 for details. There isn't
#   much value in testing this old Next.js version with newer Node versions.
# - For the latest version, we guard on the *minor* version, because 13.2 and
#   13.3 releases have both broken our instrumentation.
next-11:
  name: next
  versions: '11.1.0 || 11.1.4'
  node: '>=14.5.0 <17.0.0'
  commands: node ../next.test.js
  peerDependencies:
    - "react@^17.0.2"
    - "react-dom@^17.0.2"
next-12:
  name: next
  versions: '12.0.10 || 12.1.6 || 12.2.6 || 12.3.1 || >12.3.1 <13'
  node: '>=14.5.0'
  commands: node ../next.test.js
  peerDependencies:
    - "react@^18.2.0"
    - "react-dom@^18.2.0"
next:
  name: next
  versions: '>=13.0.0 <13.3.0'
  node: '>=14.6.0'
  commands: node ../next.test.js
  peerDependencies:
    - "react@^18.2.0"
    - "react-dom@^18.2.0"
