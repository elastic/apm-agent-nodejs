:framework: lambda

[[lambda]]

ifdef::env-github[]
NOTE: For the best reading experience,
please view this documentation at https://www.elastic.co/guide/en/apm/agent/nodejs/current/lambda.html[elastic.co]
endif::[]

=== Get started with Lambda

experimental::[]

Getting Elastic APM set up for your lambda functions is easy,
and there are various ways you can tweak it to fit your needs.
Follow the guide below to get started, and for more advanced topics,
check out the <<api,API Reference>>.

[float]
[[lambda-installation]]
==== Installation

Setting up your Lambda function is a two-step process.

1. <<lambda-extension>>
2. <<lambda-instrumenting>>

First, https://github.com/elastic/apm-aws-lambda/blob/main/docs/aws-lambda-extension.asciidoc[install the Elastic
APM Lambda extension] into your Lambda environment. Elastic uses a Lambda
extension to forward data to APM Server in a way that does not interfere with the
execution of your Lambda function.

[float]
[[lambda-extension]]
==== Install the Elastic APM Lambda extension

Elastic uses a Lambda extension to forward data to APM Server in a way that does not interfere with the
execution of your Lambda function.

See the https://github.com/elastic/apm-aws-lambda/blob/main/docs/aws-lambda-extension.asciidoc[installation documentation] to get started.

Once you have the extension installed in your environment, you can
configure your Lambda handler to instrument your function.

[float]
[[lambda-instrumenting]]
==== Instrumenting your Lambda Handler

Add the `elastic-apm-node` module as a dependency to your application:

[source,bash]
----
npm install elastic-apm-node --save
----

[float]
[[lambda-initialization]]
==== Initialization

It's important that the agent is started before you require *any* other modules in your Node.js application - i.e. before `http`, etc.

Here's a simple lambda example with the Elastic APM agent installed:

[source,js]
----
// Add this to the VERY top of your lambda handler module
const apm = require('elastic-apm-node').start({})

exports.handler = apm.lambda(function handler (payload, context, callback) {
  callback(null, `Hello, ${payload.name}!`)
})
----

The agent will now monitor the performance of your lambda function.

*IMPORTANT*: During installation of the Lambda extension you'll have set a number of environment variables for configuring the agent.  We recommend relying on these environment variables -- while it's possible to set configuration values via the configuration object passed to `start`, doing so may interfere with the configuration required by the Lambda extension.

[float]
[[lambda-full-documentation]]
===== Full documentation

* <<advanced-setup,Setup and Configuration>>
* <<api,API Reference>>

[float]
[[lambda-performance-monitoring]]
==== Performance monitoring

Elastic APM automatically measures the performance of your lambda function executions.
It records traces for database queries,
external HTTP requests,
and other slow operations that happen during execution.

By default, the agent will trace <<supported-technologies,the most common modules>>.
To trace other events,
you can use custom traces.
For information about custom traces,
see the <<custom-spans,Custom Spans section>>.

[float]
[[lambda-error-logging]]
==== Error logging

include::./shared-set-up.asciidoc[tag=error-logging]

[float]
[[lambda-filter-sensitive-information]]
==== Filter sensitive information

include::./shared-set-up.asciidoc[tag=filter-sensitive-info]

[float]
[[lambda-add-your-own-data]]
==== Add your own data

The Node.js agent will keep track of the active lambda function execution and will link it to errors and recorded transaction metrics when they are sent to the Elastic APM server.
This allows you to see details about which execution resulted in a particular error or which lambda functions are slow.

But in many cases,
information about the lambda execution itself isn't enough.
To add even more metadata to errors and transactions,
use one of the two functions below:

* <<apm-set-user-context,`apm.setUserContext()`>> - Call this to enrich collected performance data and errors with information about the user/client
* <<apm-set-custom-context,`apm.setCustomContext()`>> - Call this to enrich collected performance data and errors with any information that you think will help you debug performance issues and errors (this data is only stored, but not indexed in Elasticsearch)
* <<apm-set-label,`apm.setLabel()`>> - Call this to enrich collected performance data and errors with simple key/value strings that you think will help you debug performance issues and errors (labels are indexed in Elasticsearch)

[float]
[[lambda-troubleshooting]]
==== Troubleshooting

include::./shared-set-up.asciidoc[tag=troubleshooting-link]
