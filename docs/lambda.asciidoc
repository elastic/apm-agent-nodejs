[[lambda]]

ifdef::env-github[]
NOTE: For the best reading experience,
please view this documentation at https://www.elastic.co/guide/en/apm/agent/nodejs/current/lambda.html[elastic.co]
endif::[]

=== Monitoring AWS Lambda Node.js Functions
:layer-section-type: with-agent

The Node.js APM Agent can be used with AWS Lambda to monitor the execution of your AWS Lambda functions.

[float]
[[aws-lambda-nodejs-quick-start]]
=== Quick Start

To get started with APM for your Node.js AWS Lambda functions follow the steps below.

[float]
[[aws-lambda-nodejs-prerequisites]]
==== Prerequisites

You need an APM Server to send APM data to. Follow the {apm-guide-ref}/apm-quick-start.html[APM Quick start] if you have not set one up yet. For the best-possible performance, we recommend setting up APM on {ecloud} in the same AWS region as your AWS Lambda functions.

[float]
==== Step 1: Select the AWS Region and Architecture

include::{apm-aws-lambda-root}/docs/lambda-selector/lambda-attributes-selector.asciidoc[]

[float]
==== Step 2: Add the APM Layers to your Lambda function

include::{apm-aws-lambda-root}/docs/lambda-selector/extension-arn-replacement.asciidoc[]
include::./lambda/nodejs-arn-replacement.asciidoc[]

Both the {apm-lambda-ref}/aws-lambda-arch.html[{apm-lambda-ext}] and the Node.js APM Agent are added to your Lambda function as https://docs.aws.amazon.com/lambda/latest/dg/invocation-layers.html[AWS Lambda Layers]. Therefore, you need to add the corresponding Layer ARNs (identifiers) to your Lambda function.

include::{apm-aws-lambda-root}/docs/add-extension/add-extension-layer-widget.asciidoc[]

[float]
==== Step 3: Configure APM on AWS Lambda

The {apm-lambda-ext} and the APM Node.js agent are configured through environment variables on the AWS Lambda function.

For the minimal configuration, you will need the _APM Server URL_ to set the destination for APM data and an _{apm-guide-ref}/secret-token.html[APM Secret Token]_.
If you prefer to use an {apm-guide-ref}/api-key.html[APM API key] instead of the APM secret token, use the `ELASTIC_APM_API_KEY` environment variable instead of `ELASTIC_APM_SECRET_TOKEN` in the following configuration.

For production environments, we recommend {apm-lambda-ref}/aws-lambda-secrets-manager.html[using the AWS Secrets Manager to store your APM authentication key] instead of providing the secret value as plaintext in the environment variables.

include::./lambda/configure-lambda-widget.asciidoc[]
<1> The {apm-lambda-ref}/aws-lambda-config-options.html#_elastic_apm_send_strategy[`ELASTIC_APM_SEND_STRATEGY`] defines when APM data is sent to your Elastic APM backend. To reduce the execution time of your lambda functions, we recommend to use the `background` strategy in production environments with steady load scenarios.

You can optionally <<configuration, fine-tune the Node.js agent>> or the {apm-lambda-ref}/aws-lambda-config-options.html[configuration of the {apm-lambda-ext}].

That's it. After following the steps above, you're ready to go!
Your Lambda function invocations should be traced from now on.

Read on to learn more about the features and limitations of the Node.js APM Agent on AWS Lambda Functions.

[float]
[[aws-lambda-features-and-caveats]]
=== Features and Caveats

The AWS Lambda as a runtime behaves differently from conventional runtimes.
While most APM and monitoring concepts apply to AWS Lambda, there are a few differences and limitations to be aware of.

[float]
[[aws-lambda-performance-monitoring]]
==== Performance monitoring

Elastic APM automatically measures the performance of your lambda function executions.
It records traces for database queries, external HTTP requests,
and other slow operations that happen during execution.

By default, the agent will trace <<supported-technologies,the most common modules>>.
To trace other events,
you can use custom traces.
For information about custom traces,
see the <<custom-spans,Custom Spans section>>.

[float]
[[aws-lambda-error-monitoring]]
==== Error monitoring

include::./shared-set-up.asciidoc[tag=error-logging]

[float]
[[aws-lambda-caveats]]
==== Caveats

* System and custom metrics are not collected for Lambda functions. This is both because most of those are irrelevant
and because the interval-based event sending model is not suitable for FaaS environments.
