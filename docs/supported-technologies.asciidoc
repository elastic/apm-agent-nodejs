[[supported-technologies]]

ifdef::env-github[]
NOTE: For the best reading experience,
please view this documentation at https://www.elastic.co/guide/en/apm/agent/nodejs/current/supported-technologies.html[elastic.co]
endif::[]

== Supported technologies

The Elastic APM Node.js Agent automatically instruments various APIs in Node.js core and third-party frameworks and packages. This page lists all supported technologies and version ranges.


[float]
[[compatibility-node]]
=== Node.js versions

Support for the Elastic APM Node.js agent follows the https://nodejs.org/en/about/releases/[support schedule of Node.js itself]
to the end-of-life period of each version after its maintenance term. Versions
of Node.js past their end-of-life date are not supported.

image::./images/node_release_schedule.svg[Node.js release schedule]

// XXX This is misleading as we do *still* support back to 8.6 currently, tho all of 8, 10, and 12 are EOL'd by Node core. Do we also add mention of the breaking changes, major ver bump to drop node version support, and 18 month warning?

[float]
[[compatibility-esm]]
=== ES Modules

The Elastic APM Node.js agent currently only supports automatic instrumentation
of https://nodejs.org/api/modules.html#modules-commonjs-modules[CommonJS modules]
-- modules that are imported via `require(...)` statements. It does not yet support
automatically instrumenting https://nodejs.org/api/esm.html#modules-ecmascript-modules[ECMAScript modules (ESM)]
-- modules that are imported via `import ...` statements.

For example, in the following code the `http` module *is* instrumented:

[source,js]
----
require('elastic-apm-node').start(/* ... */);

const http = require('http');
const server = http.createServer((req, res) => {
    res.statusCode = 200;
    res.end('pong');
});
server.listen(3000);
----

However, in the following code the `http` module *is not* instrumented:

[source,js]
----
import apm from 'elastic-apm-node';
apm.start(/* ... */); // This starts too late, after all imports.

import http from 'http';
const server = http.createServer((req, res) => {
    res.statusCode = 200;
    res.end('pong');
});
server.listen(3000);
----

If you use TypeScript, Babel, or another compiler that generates JavaScript,
you can ensure full compatibility with the APM agent by ensuring that it
generates code using CommonJS modules. For TypeScript this is accomplished with
https://www.typescriptlang.org/tsconfig#module[`"module": "commonjs"` in your "tsconfig.json"]
(a https://github.com/tsconfig/bases/blob/main/bases/node16.json[complete tsconfig.json example]).
For Babel this is accomplished with https://babeljs.io/docs/en/babel-preset-env#modules[`"modules": "commonjs"` in your Babel config].

This limitation only affects the agent's automatic instrumentation. Other
functionality, such as metrics collection and manual instrumentation, still
works when using ES modules. Support for ES modules is planned for a future
version of the APM agent.


[float]
[[elastic-stack-compatibility]]
=== Elastic Stack Compatibility

// See the APM agent compatibility table: https://www.elastic.co/guide/en/apm/guide/current/agent-server-compatibility.html

This agent is compatible with {apm-guide-ref}[APM Server] v6.6 and above.


[float]
[[compatibility-frameworks]]
=== Frameworks

Though you can use Elastic APM <<custom-stack,with any Node.js framework>>,
we automate a few things for the most popular Node.js modules.

These are the frameworks that we officially support:

[options="header"]
|=======================================================================
|Framework |Version
|<<express,Express>> |^4.0.0
|<<hapi,hapi>> |>=9.0.0 <19.0.0; Deprecated. No longer tested.
|<<hapi,@hapi/hapi>> |>=17.9.0 <21.0.0
|<<koa,Koa>> via koa-router or @koa/router |>=5.2.0 <10.0.0
2+|Koa doesn't have a built in router, so we can't support Koa directly since we rely on
router information for full support. We currently support the most popular Koa router called
https://github.com/alexmingoia/koa-router[koa-router].
|<<restify,Restify>> |>=5.2.0
|<<fastify,Fastify>> |>=1.0.0; see also https://www.fastify.io/docs/latest/Reference/LTS/[Fastify's own LTS documentation]
|<<lambda,AWS Lambda>> |N/A
|=======================================================================

[float]
[[compatibility-custom-transactions]]
=== Custom Transactions

By default transactions are named based on their matched HTTP route if the framework used is listed above.
These modules override that behavior to give better insights into specialized HTTP servers:

[options="header"]
|=======================================================================
|Module |Version |Note
|https://www.npmjs.com/package/express-graphql[express-graphql] |>=0.6.1 <0.13.0 |Will name all transactions by the GraphQL query name. (There is https://github.com/elastic/apm-agent-nodejs/issues/2516[known issue with node <10.4].)
|https://www.npmjs.com/package/apollo-server-express[apollo-server-express] |^2.0.4 <4|Will name all transactions by the GraphQL query name
|=======================================================================

[float]
[[compatibility-tracing-and-instrumentation]]
=== Tracing and Instrumentation

The Node.js agent will automatically instrument the following modules to give you detailed performance metrics:

[options="header"]
|=======================================================================
|Module |Version |Note
|https://www.npmjs.com/package/aws-sdk[aws-sdk] |>1 <3 |Will instrument SQS send/receive/delete messages, all S3 methods, all DynamoDB methods, and the SNS publish method
|https://www.npmjs.com/package/cassandra-driver[cassandra-driver] |>=3.0.0 <5 |Will instrument all queries
|https://www.npmjs.com/package/elasticsearch[elasticsearch] |>=8.0.0 |Will instrument all queries
|https://www.npmjs.com/package/@elastic/elasticsearch[@elastic/elasticsearch] |>=7.0.0 <9.0.0 |Will instrument all queries
|https://www.npmjs.com/package/graphql[graphql] |>=0.7.0 <17 |Will instrument all queries
|https://www.npmjs.com/package/handlebars[handlebars] |* |Will instrument compile and render calls
|https://www.npmjs.com/package/jade[jade] |>=0.5.6 |Will instrument compile and render calls; Deprecated. No longer tested. Use pug.
|https://www.npmjs.com/package/pug[pug] |'>=0.1.0' |Will instrument compile and render calls
|https://www.npmjs.com/package/ioredis[ioredis] |>=2.0.0 <6.0.0 |Will instrument all queries
|https://www.npmjs.com/package/memcached[memcached] |>=2.2.0  |Will instrument all commands.
|https://www.npmjs.com/package/mongodb-core[mongodb-core] |>=1.2.19 <4 |Will instrument all queries.
A lot of higher level MongoDB modules use mongodb-core,
so those should be supported as well.
|https://www.npmjs.com/package/mongodb[mongodb] |>=2.0.0 <3.3.0 |Supported via mongodb-core
|https://www.npmjs.com/package/mongodb[mongodb] |^3.3.0 <5 |Will instrument all queries
|https://www.npmjs.com/package/mongojs[mongojs] |>=1.0.0 <2.7.0 |Supported via mongodb-core
|https://www.npmjs.com/package/mongoose[mongoose] |>=4.0.0 <5.7.0 |Supported via mongodb-core
|https://www.npmjs.com/package/mysql[mysql] |^2.0.0 |Will instrument all queries
|https://www.npmjs.com/package/mysql2[mysql2] |>=1.0.0 <3.0.0 |Will instrument all queries
|https://www.npmjs.com/package/pg[pg] |>=4.0.0 <9.0.0 |Will instrument all queries
|https://www.npmjs.com/package/redis[redis] |>=2.0.0 <4.0.0 |Will instrument all queries
|https://www.npmjs.com/package/tedious[tedious] |>=1.9 <15.0.0 | (Excluding v4.0.0.) Will instrument all queries
|https://www.npmjs.com/package/ws[ws] |>=1.0.0 <8.0.0 |Will instrument outgoing WebSocket messages
|=======================================================================

[float]
[[compatibility-better-stack-traces]]
==== Better Stack Traces

When viewing a span in Elastic APM,
you'll see where in your code you initiated the span (e.g. a database query).

Given the async nature of Node.js,
it's not possible for us to see further back than the last async boundary.
We therefore make sure to monitor as close to your code as possible.
But some modules will interfere with this monitoring by injecting an async call between your code and the actual monitored function.

We monitor these "offending" modules directly to give you a better experience.

The modules and versions listed below are the ones we support.
If you use an unsupported version you might not be able to see your own code in the spans.
This does not impact the stability of your application in any way - only the collected metrics.

If you don't see your own code in spans,
please create a new topic in the https://discuss.elastic.co/c/apm[Elastic APM discuss forum] and include information about your dependencies.

[options="header"]
|=================================================
|Module |Version
|https://www.npmjs.com/package/knex[knex] |>=0.9.0 <1.0.0
|=================================================

[float]
[[compatibility-continuity]]
==== Continuity

The Elastic APM agent monitors async operations in your Node.js application to maintain awareness of which request is the active request at any given time.
Certain modules can interfere with this monitoring if not handled properly.

Below is a list of modules known to cause issues with this monitoring.
The versions listed are the versions we support.
If you use an unsupported version you might experience missing spans.
This does not impact the stability of your application in any way - only the collected metrics.

If you do experience missing spans in your performance metrics,
please create a new topic in the https://discuss.elastic.co/c/apm[Elastic APM discuss forum] and include information about your dependencies and what data is missing.

[options="header"]
|=======================================================================
|Module |Version |Note
|https://www.npmjs.com/package/bluebird[bluebird] |>=2.0.0 <4.0.0 |
|https://www.npmjs.com/package/generic-pool[generic-pool] | ^2.0.0 \|\| ^3.1.0 |Used
by a lot of database modules like for instance "pg"
|https://www.npmjs.com/package/express-queue[express-queue] |>=0.0.11 <1.0.0 |
|=======================================================================
