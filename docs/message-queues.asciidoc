[[message-quques]]
== Message Queues

The Node.js will automatically create spans for any activity to/from your Amazon SQS message queues.  In order to have those spans recorded, your message queue activity must  occur during a transaction.

If you're performing queue operations during an HTTP request from an instrumented module, the agent will start a transaction automatically.  However, if you're performing queue operations in a stand alone program (such as a message processor) you'll need to use the Node.js Agent's `startTransaction` method to create transactions for your messages.

[source,js]
----
const apm = require('elastic-apm-node').start({/*...*/})
const AWS = require('aws-sdk');
// Set the region
AWS.config.update({region: 'us-west'});

// Create an SQS service object
const sqs = new AWS.SQS({apiVersion: '2012-11-05'});

/* ... */

const transaction = apm.startTransaction("Process Messages", 'cli')
sqs.receiveMessage(params, function(err, data) {
  if(err) {
    console.log("Receive Error", err);
  } else {
    console.log(`Length: ${data.Messages.length}`)
    /* process messages */
  }
  // end the transaction
  transaction.end()
})
----

In the above code you can see we've started a transaction before calling the `sqs.receiveMessage` method,and ended it _after_ the queue's processing callback has finished executing.  The will ensure a transaction is active while processing your queue messages.

[float]
[[message-queues-distributed-tracing]]
=== Distributed Tracing and Messaging Queues

Similarly, if you want to connect your queue scheduling and queue processing via distributed tracing, you'll need to use the Node.js Agent's API to _store_ a `traceparent` header with your queue message and then provide that `traceparent` header when starting the new transaction.

Here's an example of that uses the Node.js Agent API to store the `traceparent` as a message attribute and then uses that attribute to link your new transaction with the original.

[source,js]
----
// stores the traceparent when sending the queue message
const params = {
  /* ... other params ... */
  MessageAttributes: {
    /* ... other attributes ... */
    "MyTraceparent":apm.currentTransaction && apm.currentTransaction.traceparent
  }

}
sqs.sendMessage(params, function(err, data) {
  /* ... */
});
----

[source,js]
----
// uses the traceparent to start a transaction
sqs.receiveMessage(params, function(err, data) {
  /* ... */
  for(const message of data.Messages) {
    const transaction = apm.startTransaction('Process Message', 'cli', {
      childOf:message.MessageAttributes.MyTraceparent
    })
    /* ... process message ... */
    transaction.end()
  }
})
----

Unlike the first code sample, this approach will create a single transaction for each processed queue message.  This allows you to link each individual message with the transaction it started in.

The `startTransaction` API allows _you_ to control how your queue data is reported to Elastic APM.
