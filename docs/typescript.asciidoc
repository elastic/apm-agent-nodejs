[[typescript]]

ifdef::env-github[]
NOTE: For the best reading experience,
please view this documentation at https://www.elastic.co/guide/en/apm/agent/nodejs/current/typescript.html[elastic.co]
endif::[]

=== Get started with TypeScript

The Elastic APM Node.js agent is implemented in vanilla JavaScript, but includes TypeScript types. This document shows how to integrate the APM agent with your TypeScript project.

A small, complete example project can be found https://github.com/elastic/apm-agent-nodejs/tree/main/examples/typescript[here].


[float]
[[typescript-installation]]
==== Installation

Add `elastic-apm-node` as a dependency to your application, and possibly `@types/node` as a dev-dependency for type checking:

[source,bash]
----
npm install --save elastic-apm-node
npm install --save-dev @types/node <1>
----
<1> Installing `@types/node` can be skipped if you use https://www.typescriptlang.org/tsconfig#skipLibCheck[`skipLibCheck: true`] in your "tsconfig.json".


[float]
[[typescript-tsconfig]]
==== tsconfig compiler options

The TypeScript authors strongly recommend that you use the https://www.typescriptlang.org/tsconfig/#esModuleInterop[`"esModuleInterop": true`] option in your "tsconfig.json". In case you do not, then the "default" import of the agent will not work, so instead of using `import apm from 'elastic-apm-node/start'` or similar, you will have to use:

[source,js]
----
import * as apm from 'elastic-apm-node/start' // if using esModuleInterop:false
----

Currently the Elastic APM Node.js agent <<compatibility-esm,does not support instrumenting ECMA Script modules (ESM)>>, so for full APM support you will need to tell TypeScript to generate JavaScript using CommonJS modules via the https://www.typescriptlang.org/tsconfig/#module[`"module": "commonjs"`] compiler option.

[source,json]
----
// tsconfig.json
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "moduleResolution": "node"
    // ...
  }
}
----

The current TypeScript https://github.com/tsconfig/bases#node-10-tsconfigjson[recommended tsconfigs for node] use options that work with the APM agent.


[float]
[[typescript-start]]
==== Starting the agent

For the APM agent to be able to automatically instrument modules it *must be started before you import other modules*.  This means that you should probably import and start the agent in your application's main file (usually `index.js`, `server.js` or `app.js`). One way to do this is as follows.

[source,typescript]
----
import 'elastic-apm-node/start' <1>

// Application code starts here.
// ...
----
<1> This start method requires you to use environment variables to configure the agent. See <<starting-the-agent>> for all the ways to start the agent.

Pay special attention to <<start-typescript,the possible surprise gotcha>> where the TypeScript compiler can throw away your import in the generated JavaScript.


[float]
[[typescript-next-steps]]
==== Next steps

The APM agent will now trace your application, monitor performance, and record any uncaught exceptions. Refer to the following documentation to configure and use the APM agent.

* <<advanced-setup,Setup and Configuration>>
* <<api,API Reference>>

include::./shared-set-up.asciidoc[tag=troubleshooting-link]
