[[advanced-setup]]

ifdef::env-github[]
NOTE: For the best reading experience,
please view this documentation at https://www.elastic.co/guide/en/apm/agent/nodejs/current/advanced-setup.html[elastic.co]
endif::[]

== Configuration

The following pages will help you configure your APM Agent.

* <<configuring-the-agent>>
** <<agent-configuration-object>>
** <<agent-configuration-file>>
* <<es-modules>>
* <<configuration>>

[[configuring-the-agent]]
=== Configuring the agent

There are multiple ways to configure the Node.js agent. In order of precedence (higher overwrites lower):

1. APM Agent Configuration via Kibana.
(supported options are marked with <<dynamic-configuration, image:./images/dynamic-config.svg[] >>)

2. Environment variables.

3. If calling the `apm.start()` function,
you can supply a <<agent-configuration-object,configurations object>> as the first argument.

4. Via the <<agent-configuration-file,agent configuration file>>.

For information on the available configuration properties, and the expected names of environment variables, see the <<configuration,Configuration options>> documentation.

[float]
[[dynamic-configuration]]
==== Dynamic configuration

Configuration options marked with the image:./images/dynamic-config.svg[] badge can be changed at runtime
when set from a supported source.

The Node.js Agent supports {apm-app-ref}/agent-configuration.html[Central configuration],
which allows you to fine-tune certain configurations via the APM app in Kibana.
This feature is enabled in the Agent by default, with <<central-config>>.

[float]
[[agent-configuration-object]]
==== Agent configuration object

To use the optional `options` argument, simply pass it into the `apm.start()` method:

[source,js]
----
var apm = require('elastic-apm-node').start({
  // add configuration options here
})
----

Here's an example usage configuring the agent to only be active in production:

[source,js]
----
// Add this to the VERY top of the first file loaded in your app
require('elastic-apm-node').start({
  // Override service name from package.json
  // Allowed characters: a-z, A-Z, 0-9, -, _, and space
  serviceName: '',

  // Use if APM Server requires a token
  secretToken: '',

  // Set custom APM Server URL (default: http://localhost:8200)
  serverUrl: '',

  // Only activate the agent if it's running in production
  active: process.env.NODE_ENV === 'production'
})
----

[float]
[[agent-configuration-file]]
==== Agent configuration file

The Node.js agent will look for a file named `elastic-apm-node.js` in the current working directory.
You can specify a custom path for this file using the <<config-file,`configFile`>> config option.

[[es-modules]]
=== ES Modules support

If you are using ES Modules,
for instance with the help of Babel,
TypeScript,
or the `--experimental-modules` flag for Node.js,
all import statements are evaluated prior to calling any functions.
**In this case, you can't configure the agent by passing a configuration object to the `start` function,
as this call will happen after all of the modules have been loaded.**
Instead you need to import the `elastic-apm-node/start` module:

[source,js]
----
import apm from 'elastic-apm-node/start'
----

Now, you can either configure the agent using the environment variables associated with each <<configuration,configuration option>>,
or use the optional <<agent-configuration-file,agent configuration file>>.

To explicitly start the agent you need to import `elastic-apm-node` and call the `apm.start()` method with the
<<agent-configuration-object, agent configuration object>>.

[float]
[[esm-typescript]]
==== TypeScript

If you're using TypeScript,
the default import will not work unless you use the `esModuleInterop` https://www.typescriptlang.org/docs/handbook/compiler-options.html[compiler option].
If you don't want to switch on `esModuleInterop`,
you instead have to import the agent like so:

[source,js]
----
import * as apm from 'elastic-apm-node/start'
----

include::./configuration.asciidoc[]

include::./custom-transactions.asciidoc[]

include::./custom-spans.asciidoc[]
