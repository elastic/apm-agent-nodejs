[[agent-api]]

ifdef::env-github[]
NOTE: For the best reading experience,
please view this documentation at https://www.elastic.co/guide/en/apm/agent/nodejs/current/agent-api.html[elastic.co]
endif::[]

=== `Agent` API

NOTE: This is the API documentation for the Elastic APM Node.js Agent.
For getting started,
we recommend that you take a look at our framework specific documentation for either <<express,Express>>,
<<hapi,hapi>>,
<<koa,Koa>>,
<<restify,Restify>>,
<<fastify,Fastify>>,
or <<custom-stack,custom frameworks>>.

The Elastic APM agent for Node.js is a singleton.
You get the agent instance by either requiring `elastic-apm-node` or `elastic-apm-node/start`.
For details on the two approaches,
see the <<advanced-setup,Setup and Configuration>> guide.

The agent is also returned by the `start()` function,
which allows you to require and start the agent on the same line:

[source,js]
----
const apm = require('elastic-apm-node').start(...)
----

If you need to access the `Agent` in any part of your codebase,
you can simply require `elastic-apm-node` to access the already started singleton.
You therefore don't need to manage or pass around the started `Agent` yourself.

[[apm-start]]
==== `apm.start([options])`

Starts the Elastic APM agent for Node.js and returns itself.

[IMPORTANT]
====
Put the call to this function at the very top of your main app file - before requiring any other modules.

If you are using Babel calling this function will not have the desired effect.
See the <<es-modules,Babel / ES Modules support documentation>> for details.

If you are using Typescript the import statement may be removed if it is not used.
It is recommended to use `-r elastic-apm-node/start` when starting the app to avoid this.
====

See the <<configuration,Configuration documentation>> for available options.

[[apm-is-started]]
==== `apm.isStarted()`

[small]#Added in: v1.5.0#

Use `isStarted()` to check if the agent has already started.
Returns `true` if the agent has started, 
otherwise returns `false`.

[[apm-set-framework]]
==== `apm.setFramework(options)`

[small]#Added in: v2.8.0#

* `options` +{type-object}+ The following options are supported:
** `name` +{type-string}+ Framework name.
** `version` +{type-string}+ Framework version.
** `overwrite` +{type-boolean}+ If set to `false`,
  the <<framework-name,`frameworkName`>> and <<framework-version,`frameworkVersion`>> provided as <<configuration,config options>> will not be overwritten.
  *Default:* `true`.

Set or change the <<framework-name,`frameworkName`>> or <<framework-version,`frameworkVersion`>> after the agent has started.
These config options can also be provided as part of the <<configuration,regular agent configuration>>.

[[apm-add-filter]]
==== `apm.addFilter(callback)`

// [small]#Added in: #

Use `addFilter()` to supply a filter function.

Each filter function will be called just before data is being sent to the APM Server.
This will allow you to manipulate the data being sent,
for instance to remove sensitive information like passwords etc.

Each filter function will be called in the order they were added,
and will receive a `payload` object as the only argument,
containing the data about to be sent to the APM Server.

The format of the payload depends on the event type being sent.
For details about the different formats,
see the {apm-server-ref-v}/intake-api.html[APM Server intake API documentation].

The filter function is synchronous and should return the manipulated payload object.
If a filter function doesn't return any value or returns a falsy value,
the remaining filter functions will not be called and the payload *will not* be sent to the APM Server.

Example usage:

[source,js]
----
apm.addFilter(function (payload) {
  if (payload.context.request && payload.context.request.headers) {
    // redact sensitive data
    payload.context.request.headers['x-secret'] = '[REDACTED]'
  }

  // remember to return the modified payload
  return payload
})
----

A set of built-in filters are added by default.
See <<filter-http-headers,`filterHttpHeaders`>> for details.

Though you can also use filter functions to add new contextual information to the `user` and `custom` properties,
it's recommended that you use <<apm-set-user-context,`apm.setUserContext()`>> and <<apm-set-custom-context,`apm.setCustomContext()`>> for that purpose.

[[apm-add-error-filter]]
==== `apm.addErrorFilter(callback)`

[small]#Added in: v2.0.0#

Similar to <<apm-add-filter,`apm.addFilter()`>>,
but the `callback` will only be called with error payloads.

[[apm-add-transaction-filter]]
==== `apm.addTransactionFilter(callback)`

[small]#Added in: v2.0.0#

Similar to <<apm-add-filter,`apm.addFilter()`>>,
but the `callback` will only be called with transaction payloads.

[[apm-add-span-filter]]
==== `apm.addSpanFilter(callback)`

[small]#Added in: v2.0.0#

Similar to <<apm-add-filter,`apm.addFilter()`>>,
but the `callback` will only be called with span payloads.

[[apm-set-user-context]]
==== `apm.setUserContext(context)`

[small]#Added in: v0.1.0#

* `context` +{type-object}+ Accepts the following optional properties:
** `id` +{type-string}+ | +{type-number}+ The user's ID.
** `username` +{type-string}+ The user's username.
** `email` +{type-string}+ The user's e-mail.

Call this to enrich collected performance data and errors with information about the user/client.
This function can be called at any point during the request/response life cycle (i.e. while a transaction is active).

The given `context` will be added to the active transaction.
If no active transaction can be found,
`false` is returned.
Otherwise `true`.

It's possible to call this function multiple times within the scope of the same active transaction.
For each call, the properties of the `context` argument are shallow merged with the context previously given.

If an error is captured,
the context from the active transaction is used as context for the captured error,
and any custom context given as the 2nd argument to <<apm-capture-error,`apm.captureError`>> takes precedence and is shallow merged on top.

The provided user context is stored under `context.user` in Elasticsearch on both errors and transactions.

[[apm-set-custom-context]]
==== `apm.setCustomContext(context)`

[small]#Added in: v0.1.0#

* `context` +{type-object}+ Can contain any property that can be JSON encoded.

Call this to enrich collected errors and transactions with any information that you think will help you debug performance issues or errors.
This function can be called at any point while a transaction is active (e.g. during the request/response life cycle of an incoming HTTP request).

The provided custom context is stored under `context.custom` in Elasticsearch on both errors and transactions.

The given `context` will be added to the active transaction.
If no active transaction can be found,
`false` is returned.
Otherwise `true`.

It's possible to call this function multiple times within the scope of the same active transaction.
For each call, the properties of the `context` argument are shallow merged with the context previously given.

If an error is captured,
the context from the active transaction is used as context for the captured error,
and any custom context given as the 2nd argument to <<apm-capture-error,`apm.captureError`>> takes precedence and is shallow merged on top.

TIP: Before using custom context, ensure you understand the different types of
{apm-overview-ref-v}/metadata.html[metadata] that are available.

[[apm-set-tag]]
==== `apm.setTag(name, value)`

deprecated[2.10.0,Replaced by <<apm-set-label>>]

[small]#Added in: v0.1.0#

* `name` +{type-string}+
Any periods (`.`), asterisks (`*`), or double quotation marks (`"`) will be replaced by underscores (`_`),
as those characters have special meaning in Elasticsearch
* `value` +{type-string}+
If a non-string data type is given,
it's converted to a string before being sent to the APM Server

Set a tag on the current transaction.
You can set multiple tags on the same transaction.
If an error happens during the current transaction,
it will also get tagged with the same tags.

Tags are key/value pairs that are indexed by Elasticsearch and therefore searchable (as opposed to data set via <<apm-set-custom-context,`apm.setCustomContext()`>>).


[[apm-set-label]]
==== `apm.setLabel(name, value)`

[small]#Added in: v0.1.0#

[small]#Renamed from `apm.setTag()` to `apm.setLabel()`: v2.10.0#

* `name` +{type-string}+
Any periods (`.`), asterisks (`*`), or double quotation marks (`"`) will be replaced by underscores (`_`),
as those characters have special meaning in Elasticsearch
* `value` +{type-string}+
If a non-string data type is given,
it's converted to a string before being sent to the APM Server

Set a label on the current transaction.
You can set multiple labels on the same transaction.
If an error happens during the current transaction,
it will also get tagged with the same label.

TIP: Labels are key/value pairs that are indexed by Elasticsearch and therefore searchable
(as opposed to data set via <<apm-set-custom-context,`apm.setCustomContext()`>>).
Before using custom labels, ensure you understand the different types of
{apm-overview-ref-v}/metadata.html[metadata] that are available.

WARNING: Avoid defining too many user-specified labels.
Defining too many unique fields in an index is a condition that can lead to a
{ref}/mapping.html#mapping-limit-settings[mapping explosion].

[[apm-add-tags]]
==== `apm.addTags({ [name]: value })`

deprecated[2.10.0,Replaced by <<apm-add-labels>>]

[small]#Added in: v1.5.0#

* `tags` +{type-object}+ Contains key/value pairs:
** `name` +{type-string}+
Any periods (`.`), asterisks (`*`), or double quotation marks (`"`) will be replaced by underscores (`_`),
as those characters have special meaning in Elasticsearch
** `value` +{type-string}+
If a non-string data type is given,
it's converted to a string before being sent to the APM Server

Add several tags on the current transaction.
You can add tags multiple times.
If an error happens during the current transaction,
it will also get tagged with the same tags.

Tags are key/value pairs that are indexed by Elasticsearch and therefore searchable (as opposed to data set via <<apm-set-custom-context,`apm.setCustomContext()`>>).


[[apm-add-labels]]
==== `apm.addLabels({ [name]: value })`

[small]#Added in: v1.5.0#

[small]#Renamed from `apm.addTags()` to `apm.addLabels()`: v2.10.0#

* `labels` +{type-object}+ Contains key/value pairs:
** `name` +{type-string}+
Any periods (`.`), asterisks (`*`), or double quotation marks (`"`) will be replaced by underscores (`_`),
as those characters have special meaning in Elasticsearch
** `value` +{type-string}+
If a non-string data type is given,
it's converted to a string before being sent to the APM Server

Add several labels on the current transaction.
You can add labels multiple times.
If an error happens during the current transaction,
it will also get tagged with the same labels.

TIP: Labels are key/value pairs that are indexed by Elasticsearch and therefore searchable
(as opposed to data set via <<apm-set-custom-context,`apm.setCustomContext()`>>).
Before using custom labels, ensure you understand the different types of
{apm-overview-ref-v}/metadata.html[metadata] that are available.

WARNING: Avoid defining too many user-specified labels.
Defining too many unique fields in an index is a condition that can lead to a
{ref}/mapping.html#mapping-limit-settings[mapping explosion].

[[apm-capture-error]]
==== `apm.captureError(error[, options][, callback])`

[small]#Added in: v0.1.0#

* `error` - Can be either an +{type-error}+ object,
a <<message-strings,message string>>,
or a <<parameterized-message-object,special parameterized message object>>

* `options` +{type-object}+ The following options are supported:

** `timestamp` +{type-number}+ The time when the error happened.
Must be a Unix Time Stamp representing the number of milliseconds since January 1, 1970, 00:00:00 UTC.
Sub-millisecond precision can be achieved using decimals.
If not provided,
the current time will be used

** `message` - If the `error` argument is an +{type-error}+ object,
it's possible to use this option to supply an additional message string that will be stored along with the error message under `log.message`

** `user` - See <<metadata,metadata section>> for details about this option

** `custom` - See <<metadata,metadata section>> for details about this option

* `callback` - Will be called after the error has been sent to the APM Server.
It will receive an `Error` instance if the agent failed to send the error,
and the id of the captured error

Send an error to the APM Server:

[source,js]
----
apm.captureError(new Error('boom!'))
----

[[message-strings]]
===== Message strings

Instead of an `Error` object,
you can log a plain text message:

[source,js]
----
apm.captureError('Something happened!')
----

This will also be sent as an error to the APM Server,
but will not be associated with an exception.

[[parameterized-message-object]]
===== Parameterized message object

Instead of an `Error` object or a string,
you can supply a special parameterized message object:

[source,js]
----
apm.captureError({
  message: 'Could not find user %s with id %d in the database',
  params: ['Peter', 42]
})
----

This makes it possible to better group error messages that contain variable data like ID's or names.

[[metadata]]
===== Metadata

To ease debugging it's possible to send some extra data with each error you send to the APM Server.
The APM Server intake API supports a lot of different metadata fields,
most of which are automatically managed by the Elastic APM Node.js Agent.
But if you wish you can supply some extra details using `user` or `custom`.
For more details on the properties accepted by the events intake API see the {apm-server-ref-v}/events-api.html[events intake API docs].

To supply any of these extra fields,
use the optional options argument when calling `apm.captureError()`.

Here are some examples:

[source,js]
----
// Sending some extra details about the user
apm.captureError(error, {
  user: {
    id: 'unique_id',
    username: 'foo',
    email: 'foo@example.com'
  }
})

// Sending some arbitrary details using the `custom` field
apm.captureError(error, {
  custom: {
    some_important_metric: 'foobar'
  }
})
----

To supply per-request metadata to all errors captured in one central location,
use <<apm-set-user-context,`apm.setUserContext()`>> and <<apm-set-custom-context,`apm.setCustomContext()`>>.

[[http-requests]]
===== HTTP requests

Besides the options described in the <<metadata,metadata section>>,
you can use the `options` argument to associate the error with an HTTP request:

[source,js]
----
apm.captureError(err, {
  request: req // an instance of http.IncomingMessage
})
----

This will log the URL that was requested,
the HTTP headers,
cookies and other useful details to help you debug the error.

In most cases, this isn't needed,
as the agent is pretty smart at figuring out if your Node.js app is an HTTP server and if an error occurred during an incoming request.
In which case it will automate this processes for you.

[[http-responses]]
===== HTTP responses

Besides the options described in the <<metadata,metadata section>>,
you can use the `options` argument to associate the error with an HTTP response:

[source,js]
----
apm.captureError(err, {
  response: res // an instance of http.ServerResponse
})
----

This will log the response status code,
headers and other useful details to help you debug the error.

In most cases, this isn't needed,
as the agent is pretty smart at figuring out if your Node.js app is an HTTP server and if an error occurred during an incoming request.
In which case it will automate this processes for you.

[[apm-middleware-connect]]
==== `apm.middleware.connect()`

[small]#Added in: v0.1.0#

Returns a middleware function used to collect and send errors to the APM Server.

[source,js]
----
const apm = require('elastic-apm-node').start()
const connect = require('connect')

const app = connect()

// your regular middleware:
app.use(...)
app.use(...)

// your main HTTP router
app.use(function (req, res, next) {
  throw new Error('Broke!')
})

// add Elastic APM in the bottom of the middleware stack
app.use(apm.middleware.connect())

app.listen(3000)
----

NOTE: `apm.middleware.connect` _must_ be added to the middleware stack _before_ any other error handling middleware functions or there's a chance that the error will never get to the agent.

[[apm-start-transaction]]
==== `apm.startTransaction([name][, type][, options])`

[small]#Added in: v0.1.0#

* `name` +{type-string}+ The name of the transaction.
You can always set this later via <<transaction-name,`transaction.name`>> or <<apm-set-transaction-name,`apm.setTransactionName()`>>.
*Default:* `unnamed`

* `type` +{type-string}+ The type of transaction.
You can always set this later via <<transaction-type,`transaction.type`>>.
*Default:* `custom`

* `options` +{type-object}+ The following options are supported:

** `startTime` +{type-number}+ The time when the transaction started.
Must be a Unix Time Stamp representing the number of milliseconds since January 1, 1970, 00:00:00 UTC.
Sub-millisecond precision can be achieved using decimals.
If not provided,
the current time will be used

** `childOf` +{type-string}+ The traceparent header received from a remote service.

Start a new transaction.

Use this function to create a custom transaction.
Note that the agent will do this for you automatically whenever your application receives an incoming HTTP request.
You only need to use this function to create custom transactions.

There's a special `type` called `request` which is used by the agent for the transactions automatically created when an incoming HTTP request is detected.

See the <<transaction-api,Transaction API>> docs for details on how to use custom transactions.

[[apm-end-transaction]]
==== `apm.endTransaction([result][, endTime])`

[small]#Added in: v0.1.0#

* `result` +{type-string}+ Describes the result of the transaction.
This is typically the HTTP status code,
or e.g. "success" or "failure" for a background task

* `endTime` +{type-number}+ The time when the transaction ended.
Must be a Unix Time Stamp representing the number of milliseconds since January 1, 1970, 00:00:00 UTC.
Sub-millisecond precision can be achieved using decimals.
If not provided,
the current time will be used

Ends the active transaction.
If no transaction is currently active,
nothing happens.

Note that the agent will do this for you automatically for all regular HTTP transactions.
You only need to use this function to end custom transactions created by <<apm-start-transaction,`apm.startTransaction()`>> or if you wish the end a regular transaction prematurely.

Alternatively you can call <<transaction-end,`end()`>> directly on an active transaction object.

[[apm-current-transaction]]
==== `apm.currentTransaction`

[small]#Added in: v1.9.0#

Get the currently active transaction,
if used within the context of a transaction.

NOTE: If there's no active transaction available,
`null` will be returned.

[[apm-current-span]]
==== `apm.currentSpan`

[small]#Added in: v2.0.0#

Get the currently active span,
if used within the context of a span.

NOTE: If there's no active span available,
`null` will be returned.

[[apm-current-traceparent]]
==== `apm.currentTraceparent`

[small]#Added in: v2.9.0#

Get the serialized traceparent string of the current transaction or span.

NOTE: If there's no active transaction or span available,
`null` will be returned.

[[apm-set-transaction-name]]
==== `apm.setTransactionName(name)`

[small]#Added in: v0.1.0#

* `name` +{type-string}+ Set or overwrite the name of the current transaction.

If you use a supported router/framework the agent will automatically set the transaction name for you.

If you do not use Express, hapi, koa-router, Restify, or Fastify or if the agent for some reason cannot detect the name of the HTTP route,
the transaction name will default to `METHOD unknown route` (e.g. `POST unknown route`).

Read more about naming routes manually in the <<custom-stack-route-naming,Get started with a custom Node.js stack>> article.

[[apm-start-span]]
==== `apm.startSpan([name][, type][, options])`

[small]#Added in: v1.1.0#

* `name` +{type-string}+ The name of the span.
You can alternatively set this via <<span-name,`span.name`>>.
*Default:* `unnamed`

* `type` +{type-string}+ The type of span.
You can alternatively set this via <<span-type,`span.type`>>.
*Default:* `custom.code`

* `options` +{type-object}+ The following options are supported:

** `startTime` +{type-number}+ The time when the span started.
Must be a Unix Time Stamp representing the number of milliseconds since January 1, 1970, 00:00:00 UTC.
Sub-millisecond precision can be achieved using decimals.
If not provided,
the current time will be used

Start and return a new custom span associated with the current active transaction.
This is the same as getting the current transaction with `apm.currentTransaction` and,
if a transaction was found,
calling `transaction.startSpan(name, type, options)` on it.

When a span is started it will measure the time until <<span-end,`span.end()`>> is called.

See <<span-api,Span API>> docs for details on how to use custom spans.

NOTE: If there's no active transaction available,
`null` will be returned.

[[apm-handle-uncaught-exceptions]]
==== `apm.handleUncaughtExceptions([callback])`

[small]#Added in: v0.1.0#

By default, the agent will terminate the Node.js process when an uncaught exception is detected.
Use this function if you need to run any custom code before the process is terminated.

[source,js]
----
apm.handleUncaughtExceptions(function (err) {
  // Do your own stuff... and then exit:
  process.exit(1)
})
----

The callback is called *after* the event has been sent to the APM Server with the following arguments:

* `err` +{type-error}+ the captured exception

This function will also enable the uncaught exception handler if it was disabled using the <<capture-exceptions,`captureExceptions`>> configuration option.

If you don't specify a callback,
the node process is terminated automatically when an uncaught exception has been captured and sent to the APM Server.

https://nodejs.org/api/process.html#process_event_uncaughtexception[It is recommended] that you don't leave the process running after receiving an uncaught exception,
so if you are using the optional callback,
remember to terminate the node process.

[[apm-flush]]
==== `apm.flush([callback])`

[small]#Added in: v0.12.0#

[source,js]
----
apm.flush(function (err) {
  // Flush complete
})
----

Manually end the active outgoing HTTP request to the APM Server.
The HTTP request is otherwise ended automatically at regular intervals,
controlled by the <<api-request-time,`apiRequestTime`>> and <<api-request-size,`apiRequestSize`>> config options.

The callback is called *after* the active HTTP request has ended.
The callback is called even if no HTTP request is currently active.

[[apm-lambda]]
==== `apm.lambda([type, ] handler)`

[small]#Added in: v1.4.0#

[source,js]
----
exports.hello = apm.lambda(function (payload, context, callback) {
  callback(null, `Hello, ${payload.name}!`)
})
----

Manually instrument a lambda function to form a transaction around each execution.
Optionally, a type may also be provided to group lambdas together. By default,
"lambda" will be used as the type name.

Read more lambda support in the <<lambda,Lambda>> article.

[[apm-add-patch]]
==== `apm.addPatch(name, handler)`

[small]#Added in: v2.7.0#

* `name` +{type-string}+
Name of module to apply the patch to, when required.
* `handler` +{type-function}+ | +{type-string}+
Must be a patch function or a path to a module exporting a patch function
** `exports` +{type-object}+ The original export object of the module
** `agent` - The agent instance to use in the patch function
** `options` +{type-object}+ The following options are supported:
*** `version` +{type-string}+ | +{type-undefined}+ The module version, if applicable.
*** `enabled` +{type-boolean}+ A flag indicating if the instrumentation is enabled.
Any module patch can be disabled, by module name, with <<disable-instrumentations,`disableInstrumentations`>>.

Register a module patch to apply on intercepted `require` calls.

A module can have any number of patches and will be applied in the order they are added.

[source,js]
----
apm.addPatch('timers', (exports, agent, { version, enabled }) => {
  const setTimeout = exports.setTimeout
  exports.setTimeout = (fn, ms) => {
    const span = agent.createSpan('set-timeout')
    return setTimeout(() => {
      span.end()
      fn()
    }, ms)
  }

  return exports
})

// or ...

apm.addPatch('timers', './timer-patch')
----

[[apm-remove-patch]]
==== `apm.removePatch(name, handler)`

[small]#Added in: v2.7.0#

Removes a module patch.
This will generally only be needed when replacing an existing patch.
To _disable_ instrumentation while keeping context propagation support, see <<disable-instrumentations,`disableInstrumentations`>>.

[source,js]
----
apm.removePatch('timers', './timers-patch')

// or ...

apm.removePatch('timers', timerPatchFunction)
----

[[apm-clear-patches]]
==== `apm.clearPatches(name)`

[small]#Added in: v2.7.0#

Clear all patches for the given module.
This will generally only be needed when replacing an existing patch.
To _disable_ instrumentation while keeping context propagation support, see <<disable-instrumentations,`disableInstrumentations`>>.

[source,js]
----
apm.clearPatches('timers')
----
