'use strict'

var semver = require('semver')
var debug = require('debug')('elastic-apm')
var shimmer = require('../shimmer')

module.exports = function (hapi, agent, version) {
  agent._platform.framework = { name: 'hapi', version: version }

  if (!semver.satisfies(version, '>=9.0.0')) {
    debug('hapi version %s not supported - aborting...', version)
    return hapi
  }

  debug('shimming hapi.Server.prototype.initialize')

  shimmer.wrap(hapi.Server.prototype, 'initialize', function (orig) {
    return function () {
      // Hooks that are always allowed
      if (typeof this.on === 'function') {
        this.on('request-error', function (req, err) {
          agent.captureError(err, {request: req.raw && req.raw.req})
        })

        this.on('log', function (event, tags) {
          if (!event || !tags.error) return

          var payload = {custom: event} // TODO: Find better location to put this than custom

          var err = event.data
          if (!(err instanceof Error) && typeof err !== 'string') {
            err = 'hapi server emitted a log event tagged error'
          }

          agent.captureError(err, payload)
        })

        this.on('request', function (req, event, tags) {
          if (!event || !tags.error) return

          var payload = {
            custom: event, // TODO: Find better location to put this than custom
            request: req.raw && req.raw.req
          }

          var err = event.data
          if (!(err instanceof Error) && typeof err !== 'string') {
            err = 'hapi server emitted a request event tagged error'
          }

          agent.captureError(err, payload)
        })
      } else {
        debug('unable to enable hapi error tracking')
      }

      // When the hapi server has no connections we don't make connection
      // lifecycle hooks
      if (this.connections.length === 0) {
        debug('unable to enable hapi instrumentation on connectionless server')
        return orig.apply(this, arguments)
      }

      // Hooks that are only allowed when the hapi server has connections
      if (typeof this.ext === 'function') {
        this.ext('onPreAuth', function (request, reply) {
          debug('received hapi onPreAuth event')

          // Record the fact that the preAuth extension have been called. This
          // info is useful later to know if this is a CORS preflight request
          // that is automatically handled by hapi (as those will not trigger
          // the onPreAuth extention)
          request._elastic_apm_onPreAuth = true

          if (request.route) {
            // fingerprint was introduced in hapi 11 and is a little more
            // stable in case the param names change
            // - path example: /foo/{bar*2}
            // - fingerprint example: /foo/?/?
            var fingerprint = request.route.fingerprint || request.route.path

            if (fingerprint) {
              var name = (request.raw && request.raw.req && request.raw.req.method) ||
                         (request.route.method && request.route.method.toUpperCase())

              if (typeof name === 'string') {
                name = name + ' ' + fingerprint
              } else {
                name = fingerprint
              }

              agent._instrumentation.setDefaultTransactionName(name)
            }
          }

          return reply.continue()
        })

        this.ext('onPreResponse', function (request, reply) {
          debug('received hapi onPreResponse event')

          // Detection of CORS preflight requests:
          // There is no easy way in hapi to get the matched route for a
          // CORS preflight request that matches any of the autogenerated
          // routes created by hapi when `cors: true`. The best solution is to
          // detect the request "fingerprint" using the magic if-sentence below
          // and group all those requests into on type of transaction
          if (!request._elastic_apm_onPreAuth &&
              request.route && request.route.path === '/{p*}' &&
              request.raw && request.raw.req && request.raw.req.method === 'OPTIONS' &&
              request.raw.req.headers['access-control-request-method']) {
            agent._instrumentation.setDefaultTransactionName('CORS preflight')
          }

          return reply.continue()
        })
      } else {
        debug('unable to enable automatic hapi transaction naming')
      }

      return orig.apply(this, arguments)
    }
  })

  return hapi
}
